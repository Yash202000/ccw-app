generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:password@192.168.120.55:5432/ccw?schema=public"
  // url      = env("DATABASE_URL")
}



model User {
  id    Int     @default(autoincrement()) @id  @map("id")
  email String  @unique @map("email")
  password  String @map("password")
  timestamp DateTime @default(now()) @map("timestamp") @db.Timestamptz()
  
  profile UserProfile? 

  posts Post[]
  comments  Comment[]
  upvotes   Upvote[]
  feedbacks UserFeedBack[]

  @@map("users")
}


model UserProfile {
   id Int  @default(autoincrement()) @id @map("id")
   firstName  String? @map("first_name")
   LastName  String? @map("last_name")
   phoneNumber String? @map("phone_number")
   addressLine1 String? @map("address_line_1")
   addressLine2 String? @map("address_line_2")
   avatar String? @map("avatar")
   
   userId Int @unique @map("user_id")

   user    User    @relation(fields: [userId], references: [id],onDelete: Cascade)
   @@map("user_profiles")
   
}



model Post {
  id        Int      @default(autoincrement()) @id @map("id")
  title     String @map("title")
  content   String? @map("content")
  imageUrl  String  @map("image_url")
  city      String  @map("city")
  latitude  Float   @map("latitude")
  longitude Float   @map("longitude")
  published Boolean? @default(false) @map("published")
  timestamp DateTime @default(now()) @map("timestamp") @db.Timestamptz() 
  authorId  Int  @map("author_id")
  comments  Comment[]
  upvotes   Upvote[]

  author    User?    @relation(fields: [authorId], references: [id],onDelete: Cascade)

  @@map("posts")
}

model Upvote {
  id        Int      @default(autoincrement()) @id @map("id")
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("upvotes")
}

model Comment {
  id        Int      @default(autoincrement()) @id @map("id")
  postId    Int      @map("post_id")
  userId    Int      @map("user_id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model UserFeedBack{
   id        Int      @default(autoincrement()) @id @map("id")
   rating    Int @map("rating")
   feedback  String @map("feedback")
   authorId  Int  @map("author_id")

   author    User   @relation(fields: [authorId], references: [id],onDelete: Cascade)
   @@map("user_feedbacks")
}